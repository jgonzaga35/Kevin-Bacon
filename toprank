#!/usr/bin/python3

import sqlite3,sys

if len(sys.argv) < 3 :
  print("Usage:",sys.argv[0],"Genres MinRating")
  sys.exit(1)

genres = sys.argv[1].split('&')
num_of_genres = len(genres)
min_rating = sys.argv[2]
genres = tuple(genres)

if num_of_genres == 1:
  genres = '''('{}')'''.format(genres[0])

if sys.argv[1] == '':
    string ='''
    SELECT DISTINCT m.title, m.year, m.content_rating, m.lang, r.imdb_score, r.num_voted_users
    FROM movie m
    LEFT OUTER JOIN rating r on r.movie_id = m.id 
    LEFT OUTER JOIN acting act ON act.movie_id = m.id 
    LEFT OUTER JOIN actor a ON a.id = act.actor_id
    LEFT OUTER JOIN director d ON d.id = m.director_id
    WHERE r.imdb_score >= {}
    GROUP BY m.id, m.title
    ORDER BY r.imdb_score desc, r.num_voted_users desc
    '''.format(min_rating)
else:
    string ='''
    SELECT DISTINCT m.title, m.year, m.content_rating, m.lang, r.imdb_score, r.num_voted_users
    FROM movie m
    LEFT OUTER JOIN rating r on r.movie_id = m.id 
    LEFT OUTER JOIN acting act ON act.movie_id = m.id 
    LEFT OUTER JOIN actor a ON a.id = act.actor_id
    LEFT OUTER JOIN director d ON d.id = m.director_id
    INNER JOIN genre g ON g.movie_id = m.id 
    WHERE g.genre IN {}
    AND r.imdb_score >= {}
    GROUP BY m.id, m.title
    HAVING COUNT(distinct g.genre) = {}
    ORDER BY r.imdb_score desc, r.num_voted_users desc
    '''.format(genres, min_rating,num_of_genres)

con = sqlite3.connect('a2.db')

cur = con.cursor()
cur.execute(string)
i = 1
while True:
  t = cur.fetchone()
  if t == None:
    break
  
  title, year, content_rating, lang, imdb_score, votes = t
  year_rating_lang = []
  for j in range(1,4):
    if t[j] != None:
      year_rating_lang.append(str(t[j]))

  joined = ', '.join([str(item) for item in year_rating_lang])
  print('{}. {} ({}) [{}, {}]'.format(i,title, joined, imdb_score, votes))
  i = i + 1

con.close()
